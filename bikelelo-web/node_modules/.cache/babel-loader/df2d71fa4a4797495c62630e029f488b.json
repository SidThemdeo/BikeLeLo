{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { createNavigatorFactory, StackActions, StackRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport NativeStackView from '../views/NativeStackView';\n\nfunction NativeStackNavigator(_ref) {\n  let {\n    initialRouteName,\n    children,\n    screenListeners,\n    screenOptions,\n    ...rest\n  } = _ref;\n  const {\n    state,\n    descriptors,\n    navigation,\n    NavigationContent\n  } = useNavigationBuilder(StackRouter, {\n    initialRouteName,\n    children,\n    screenListeners,\n    screenOptions\n  });\n  React.useEffect(() => {\n    var _navigation$addListen;\n\n    return navigation === null || navigation === void 0 ? void 0 : (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', e => {\n      const isFocused = navigation.isFocused(); // Run the operation in the next frame so we're sure all listeners have been run\n      // This is necessary to know if preventDefault() has been called\n\n      requestAnimationFrame(() => {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          // When user taps on already focused tab and we're inside the tab,\n          // reset the stack to replicate native behaviour\n          navigation.dispatch({ ...StackActions.popToTop(),\n            target: state.key\n          });\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return /*#__PURE__*/React.createElement(NavigationContent, null, /*#__PURE__*/React.createElement(NativeStackView, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  })));\n}\n\nexport default createNavigatorFactory(NativeStackNavigator);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,SACEA,sBADF,EAKEC,YALF,EAOEC,WAPF,EASEC,oBATF,QAUO,0BAVP;AAWA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAOA,OAAOC,eAAP,MAA4B,0BAA5B;;AAEA,SAASC,oBAAT,OAM8B;AAAA,MANA;AAC5BC,oBAD4B;AAE5BC,YAF4B;AAG5BC,mBAH4B;AAI5BC,iBAJ4B;AAK5B,OAAGC;AALyB,MAMAC;AAC5B,QAAM;AAAEC,SAAF;AAASC,eAAT;AAAsBC,cAAtB;AAAkCC;AAAlC,MACJb,oBAAoB,CAMlBD,WANkB,EAML;AACbK,oBADa;AAEbC,YAFa;AAGbC,mBAHa;AAIbC;AAJa,GANK,CADtB;AAcAN,OAAK,CAACa,SAANb,CACE;AAAA;;AAAA,WACEW,UADF,SACEA,cADF,WACEA,GADF,MACEA,GADF,yBACEA,UAAU,CAAEG,WADd,0DACEC,uCAA0B,UAA1B,EAAuCC,CAAD,IAAY;AAChD,YAAMC,SAAS,GAAGN,UAAU,CAACM,SAAXN,EAAlB,CADgD,CAGhD;AACA;;AACAO,2BAAqB,CAAC,MAAM;AAC1B,YACET,KAAK,CAACU,KAANV,GAAc,CAAdA,IACAQ,SADAR,IAEA,CAAEO,CAAD,CAAkCI,gBAHrC,EAIE;AACA;AACA;AACAT,oBAAU,CAACU,QAAXV,CAAoB,EAClB,GAAGd,YAAY,CAACyB,QAAbzB,EADe;AAElB0B,kBAAM,EAAEd,KAAK,CAACe;AAFI,WAApBb;AAID;AAZkB,QAArBO;AALQ,KAAV,CADF;AADF,KAsBE,CAACP,UAAD,EAAaF,KAAK,CAACU,KAAnB,EAA0BV,KAAK,CAACe,GAAhC,CAtBFxB;AAyBA,sBACEA,oBAACY,iBAAD,qBACEZ,oBAACC,eAAD,eACMM,IADN;AAEEE,SAAK,EAAEA,KAFT;AAGEE,cAAU,EAAEA,UAHd;AAIED,eAAW,EAAEA;AAJf,KADF,CADF;AAUD;;AAED,eAAed,sBAAsB,CAKnCM,oBALmC,CAArC","names":["createNavigatorFactory","StackActions","StackRouter","useNavigationBuilder","React","NativeStackView","NativeStackNavigator","initialRouteName","children","screenListeners","screenOptions","rest","_ref","state","descriptors","navigation","NavigationContent","useEffect","addListener","_navigation$addListen","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","popToTop","target","key"],"sources":["D:\\Git\\BikeLeLo\\bikelelo-web\\node_modules\\@react-navigation\\native-stack\\lib\\module\\navigators\\createNativeStackNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  EventArg,\n  ParamListBase,\n  StackActionHelpers,\n  StackActions,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type {\n  NativeStackNavigationEventMap,\n  NativeStackNavigationOptions,\n  NativeStackNavigatorProps,\n} from '../types';\nimport NativeStackView from '../views/NativeStackView';\n\nfunction NativeStackNavigator({\n  initialRouteName,\n  children,\n  screenListeners,\n  screenOptions,\n  ...rest\n}: NativeStackNavigatorProps) {\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      StackNavigationState<ParamListBase>,\n      StackRouterOptions,\n      StackActionHelpers<ParamListBase>,\n      NativeStackNavigationOptions,\n      NativeStackNavigationEventMap\n    >(StackRouter, {\n      initialRouteName,\n      children,\n      screenListeners,\n      screenOptions,\n    });\n\n  React.useEffect(\n    () =>\n      navigation?.addListener?.('tabPress', (e: any) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NavigationContent>\n      <NativeStackView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap,\n  typeof NativeStackNavigator\n>(NativeStackNavigator);\n"]},"metadata":{},"sourceType":"module"}
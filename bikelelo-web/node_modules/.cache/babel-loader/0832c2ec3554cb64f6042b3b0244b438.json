{"ast":null,"code":"/* eslint-env browser */\nimport * as React from 'react';\nimport { View } from 'react-native';\n/**\n * TODO:\n * Currently insets and frame are based on the window and are not\n * relative to the provider view. This is inconsistent with iOS and Android.\n * However in most cases if the provider view covers the screen this is not\n * an issue.\n */\n\nconst CSSTransitions = {\n  WebkitTransition: 'webkitTransitionEnd',\n  Transition: 'transitionEnd',\n  MozTransition: 'transitionend',\n  MSTransition: 'msTransitionEnd',\n  OTransition: 'oTransitionEnd'\n};\nexport function NativeSafeAreaProvider(_ref) {\n  let {\n    children,\n    style,\n    onInsetsChange\n  } = _ref;\n  React.useEffect(() => {\n    // Skip for SSR.\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    const element = createContextElement();\n    document.body.appendChild(element);\n\n    const onEnd = () => {\n      const {\n        paddingTop,\n        paddingBottom,\n        paddingLeft,\n        paddingRight\n      } = window.getComputedStyle(element);\n      const insets = {\n        top: paddingTop ? parseInt(paddingTop, 10) : 0,\n        bottom: paddingBottom ? parseInt(paddingBottom, 10) : 0,\n        left: paddingLeft ? parseInt(paddingLeft, 10) : 0,\n        right: paddingRight ? parseInt(paddingRight, 10) : 0\n      };\n      const frame = {\n        x: 0,\n        y: 0,\n        width: document.documentElement.offsetWidth,\n        height: document.documentElement.offsetHeight\n      }; // @ts-ignore: missing properties\n\n      onInsetsChange({\n        nativeEvent: {\n          insets,\n          frame\n        }\n      });\n    };\n\n    element.addEventListener(getSupportedTransitionEvent(), onEnd);\n    onEnd();\n    return () => {\n      document.body.removeChild(element);\n      element.removeEventListener(getSupportedTransitionEvent(), onEnd);\n    };\n  }, [onInsetsChange]);\n  return /*#__PURE__*/React.createElement(View, {\n    style: style\n  }, children);\n}\nlet _supportedTransitionEvent = null;\n\nfunction getSupportedTransitionEvent() {\n  if (_supportedTransitionEvent != null) {\n    return _supportedTransitionEvent;\n  }\n\n  const element = document.createElement('invalidtype');\n  _supportedTransitionEvent = CSSTransitions.Transition;\n\n  for (const key in CSSTransitions) {\n    if (element.style[key] !== undefined) {\n      _supportedTransitionEvent = CSSTransitions[key];\n      break;\n    }\n  }\n\n  return _supportedTransitionEvent;\n}\n\nlet _supportedEnv = null;\n\nfunction getSupportedEnv() {\n  if (_supportedEnv !== null) {\n    return _supportedEnv;\n  }\n\n  const {\n    CSS\n  } = window;\n\n  if (CSS && CSS.supports && CSS.supports('top: constant(safe-area-inset-top)')) {\n    _supportedEnv = 'constant';\n  } else {\n    _supportedEnv = 'env';\n  }\n\n  return _supportedEnv;\n}\n\nfunction getInset(side) {\n  return `${getSupportedEnv()}(safe-area-inset-${side})`;\n}\n\nfunction createContextElement() {\n  const element = document.createElement('div');\n  const {\n    style\n  } = element;\n  style.position = 'fixed';\n  style.left = '0';\n  style.top = '0';\n  style.width = '0';\n  style.height = '0';\n  style.zIndex = '-1';\n  style.overflow = 'hidden';\n  style.visibility = 'hidden'; // Bacon: Anything faster than this and the callback will be invoked too early with the wrong insets\n\n  style.transitionDuration = '0.05s';\n  style.transitionProperty = 'padding';\n  style.transitionDelay = '0s';\n  style.paddingTop = getInset('top');\n  style.paddingBottom = getInset('bottom');\n  style.paddingLeft = getInset('left');\n  style.paddingRight = getInset('right');\n  return element;\n}","map":{"version":3,"mappings":"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","names":["React","View","CSSTransitions","WebkitTransition","Transition","MozTransition","MSTransition","OTransition","NativeSafeAreaProvider","children","style","onInsetsChange","_ref","useEffect","document","element","createContextElement","body","appendChild","onEnd","paddingTop","paddingBottom","paddingLeft","paddingRight","window","getComputedStyle","insets","top","parseInt","bottom","left","right","frame","x","y","width","documentElement","offsetWidth","height","offsetHeight","nativeEvent","addEventListener","getSupportedTransitionEvent","removeChild","removeEventListener","_supportedTransitionEvent","createElement","key","undefined","_supportedEnv","getSupportedEnv","CSS","supports","getInset","side","position","zIndex","overflow","visibility","transitionDuration","transitionProperty","transitionDelay"],"sources":["D:\\Git\\BikeLeLo\\bikelelo-web\\node_modules\\react-native-safe-area-context\\lib\\module\\NativeSafeAreaProvider.web.tsx"],"sourcesContent":["/* eslint-env browser */\n\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport type { NativeSafeAreaProviderProps } from './SafeArea.types';\n\n/**\n * TODO:\n * Currently insets and frame are based on the window and are not\n * relative to the provider view. This is inconsistent with iOS and Android.\n * However in most cases if the provider view covers the screen this is not\n * an issue.\n */\n\nconst CSSTransitions: Record<string, string> = {\n  WebkitTransition: 'webkitTransitionEnd',\n  Transition: 'transitionEnd',\n  MozTransition: 'transitionend',\n  MSTransition: 'msTransitionEnd',\n  OTransition: 'oTransitionEnd',\n};\n\nexport function NativeSafeAreaProvider({\n  children,\n  style,\n  onInsetsChange,\n}: NativeSafeAreaProviderProps) {\n  React.useEffect(() => {\n    // Skip for SSR.\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    const element = createContextElement();\n    document.body.appendChild(element);\n    const onEnd = () => {\n      const { paddingTop, paddingBottom, paddingLeft, paddingRight } =\n        window.getComputedStyle(element);\n\n      const insets = {\n        top: paddingTop ? parseInt(paddingTop, 10) : 0,\n        bottom: paddingBottom ? parseInt(paddingBottom, 10) : 0,\n        left: paddingLeft ? parseInt(paddingLeft, 10) : 0,\n        right: paddingRight ? parseInt(paddingRight, 10) : 0,\n      };\n      const frame = {\n        x: 0,\n        y: 0,\n        width: document.documentElement.offsetWidth,\n        height: document.documentElement.offsetHeight,\n      };\n      // @ts-ignore: missing properties\n      onInsetsChange({ nativeEvent: { insets, frame } });\n    };\n    element.addEventListener(getSupportedTransitionEvent(), onEnd);\n    onEnd();\n    return () => {\n      document.body.removeChild(element);\n      element.removeEventListener(getSupportedTransitionEvent(), onEnd);\n    };\n  }, [onInsetsChange]);\n\n  return <View style={style}>{children}</View>;\n}\n\nlet _supportedTransitionEvent: string | null | undefined = null;\nfunction getSupportedTransitionEvent(): string {\n  if (_supportedTransitionEvent != null) {\n    return _supportedTransitionEvent;\n  }\n  const element = document.createElement('invalidtype');\n\n  _supportedTransitionEvent = CSSTransitions.Transition;\n  for (const key in CSSTransitions) {\n    if (element.style[key as keyof CSSStyleDeclaration] !== undefined) {\n      _supportedTransitionEvent = CSSTransitions[key];\n      break;\n    }\n  }\n  return _supportedTransitionEvent as string;\n}\n\ntype CssEnv = 'constant' | 'env';\n\nlet _supportedEnv: CssEnv | null = null;\nfunction getSupportedEnv(): CssEnv {\n  if (_supportedEnv !== null) {\n    return _supportedEnv;\n  }\n  const { CSS } = window;\n  if (\n    CSS &&\n    CSS.supports &&\n    CSS.supports('top: constant(safe-area-inset-top)')\n  ) {\n    _supportedEnv = 'constant';\n  } else {\n    _supportedEnv = 'env';\n  }\n  return _supportedEnv;\n}\n\nfunction getInset(side: string): string {\n  return `${getSupportedEnv()}(safe-area-inset-${side})`;\n}\n\nfunction createContextElement(): HTMLElement {\n  const element = document.createElement('div');\n  const { style } = element;\n  style.position = 'fixed';\n  style.left = '0';\n  style.top = '0';\n  style.width = '0';\n  style.height = '0';\n  style.zIndex = '-1';\n  style.overflow = 'hidden';\n  style.visibility = 'hidden';\n  // Bacon: Anything faster than this and the callback will be invoked too early with the wrong insets\n  style.transitionDuration = '0.05s';\n  style.transitionProperty = 'padding';\n  style.transitionDelay = '0s';\n  style.paddingTop = getInset('top');\n  style.paddingBottom = getInset('bottom');\n  style.paddingLeft = getInset('left');\n  style.paddingRight = getInset('right');\n  return element;\n}\n"]},"metadata":{},"sourceType":"module"}
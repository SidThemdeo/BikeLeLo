{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default function ResourceSavingScene(_ref) {\n  let {\n    visible,\n    children,\n    style,\n    ...rest\n  } = _ref;\n\n  if (Platform.OS === 'web') {\n    return /*#__PURE__*/React.createElement(View // @ts-expect-error: hidden exists on web, but not in React Native\n    , _extends({\n      hidden: !visible,\n      style: [{\n        display: visible ? 'flex' : 'none'\n      }, styles.container, style],\n      pointerEvents: visible ? 'auto' : 'none'\n    }, rest), children);\n  }\n\n  return /*#__PURE__*/React.createElement(View, {\n    style: [styles.container, style] // box-none doesn't seem to work properly on Android\n    ,\n    pointerEvents: visible ? 'auto' : 'none'\n  }, /*#__PURE__*/React.createElement(View, {\n    collapsable: false,\n    removeClippedSubviews: // On iOS & macOS, set removeClippedSubviews to true only when not focused\n    // This is an workaround for a bug where the clipped view never re-appears\n    Platform.OS === 'ios' || Platform.OS === 'macos' ? !visible : true,\n    pointerEvents: visible ? 'auto' : 'none',\n    style: visible ? styles.attached : styles.detached\n  }, children));\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAA8BC,UAA9B,EAA0CC,IAA1C,QAAiE,cAAjE;AAQA,MAAMC,YAAY,GAAG,KAArB,C,CAA4B;;AAE5B,eAAe,SAASC,mBAAT,OAKL;AAAA,MALkC;AAC1CC,WAD0C;AAE1CC,YAF0C;AAG1CC,SAH0C;AAI1C,OAAGC;AAJuC,MAKlCC;;AACR,MAAIT,QAAQ,CAACU,EAATV,KAAgB,KAApB,EAA2B;AACzB,wBACED,oBAACG,IAAD,CACE;AADF;AAEES,YAAM,EAAE,CAACN,OAFX;AAGEE,WAAK,EAAE,CACL;AAAEK,eAAO,EAAEP,OAAO,GAAG,MAAH,GAAY;AAA9B,OADK,EAELQ,MAAM,CAACC,SAFF,EAGLP,KAHK,CAHT;AAQEQ,mBAAa,EAAEV,OAAO,GAAG,MAAH,GAAY;AARpC,OASMG,IATN,GAWGF,QAXH,CADF;AAeD;;AAED,sBACEP,oBAACG,IAAD;AACEK,SAAK,EAAE,CAACM,MAAM,CAACC,SAAR,EAAmBP,KAAnB,CADT,CAEE;AAFF;AAGEQ,iBAAa,EAAEV,OAAO,GAAG,MAAH,GAAY;AAHpC,kBAKEN,oBAACG,IAAD;AACEc,eAAW,EAAE,KADf;AAEEC,yBAAqB,EACnB;AACA;AACAjB,YAAQ,CAACU,EAATV,KAAgB,KAAhBA,IAAyBA,QAAQ,CAACU,EAATV,KAAgB,OAAzCA,GAAmD,CAACK,OAApDL,GAA8D,IALlE;AAOEe,iBAAa,EAAEV,OAAO,GAAG,MAAH,GAAY,MAPpC;AAQEE,SAAK,EAAEF,OAAO,GAAGQ,MAAM,CAACK,QAAV,GAAqBL,MAAM,CAACM;AAR5C,KAUGb,QAVH,CALF,CADF;AAoBD;AAED,MAAMO,MAAM,GAAGZ,UAAU,CAACmB,MAAXnB,CAAkB;AAC/Ba,WAAS,EAAE;AACTO,QAAI,EAAE,CADG;AAETC,YAAQ,EAAE;AAFD,GADoB;AAK/BJ,UAAQ,EAAE;AACRG,QAAI,EAAE;AADE,GALqB;AAQ/BF,UAAQ,EAAE;AACRE,QAAI,EAAE,CADE;AAERE,OAAG,EAAEpB;AAFG;AARqB,CAAlBF,CAAf","names":["React","Platform","StyleSheet","View","FAR_FAR_AWAY","ResourceSavingScene","visible","children","style","rest","_ref","OS","hidden","display","styles","container","pointerEvents","collapsable","removeClippedSubviews","attached","detached","create","flex","overflow","top"],"sources":["D:\\Git\\BikeLeLo\\bikelelo-web\\node_modules\\@react-navigation\\elements\\lib\\module\\ResourceSavingView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\ntype Props = {\n  visible: boolean;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default function ResourceSavingScene({\n  visible,\n  children,\n  style,\n  ...rest\n}: Props) {\n  if (Platform.OS === 'web') {\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!visible}\n        style={[\n          { display: visible ? 'flex' : 'none' },\n          styles.container,\n          style,\n        ]}\n        pointerEvents={visible ? 'auto' : 'none'}\n        {...rest}\n      >\n        {children}\n      </View>\n    );\n  }\n\n  return (\n    <View\n      style={[styles.container, style]}\n      // box-none doesn't seem to work properly on Android\n      pointerEvents={visible ? 'auto' : 'none'}\n    >\n      <View\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS & macOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' || Platform.OS === 'macos' ? !visible : true\n        }\n        pointerEvents={visible ? 'auto' : 'none'}\n        style={visible ? styles.attached : styles.detached}\n      >\n        {children}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}